# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_event', [dirname(__file__)])
        except ImportError:
            import _event
            return _event
        if fp is not None:
            try:
                _mod = imp.load_module('_event', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _event = swig_import_helper()
    del swig_import_helper
else:
    import _event
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def romMicroPC(*args):
  return _event.romMicroPC(*args)
romMicroPC = _event.romMicroPC

def normalMicroPC(*args):
  return _event.normalMicroPC(*args)
normalMicroPC = _event.normalMicroPC

def isRomMicroPC(*args):
  return _event.isRomMicroPC(*args)
isRomMicroPC = _event.isRomMicroPC
class Event(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Minimum_Pri = _event.Event_Minimum_Pri
    Trace_Enable_Pri = _event.Event_Trace_Enable_Pri
    Debug_Break_Pri = _event.Event_Debug_Break_Pri
    CPU_Switch_Pri = _event.Event_CPU_Switch_Pri
    Delayed_Writeback_Pri = _event.Event_Delayed_Writeback_Pri
    Default_Pri = _event.Event_Default_Pri
    Serialize_Pri = _event.Event_Serialize_Pri
    CPU_Tick_Pri = _event.Event_CPU_Tick_Pri
    Stat_Event_Pri = _event.Event_Stat_Event_Pri
    Progress_Event_Pri = _event.Event_Progress_Event_Pri
    Sim_Exit_Pri = _event.Event_Sim_Exit_Pri
    Maximum_Pri = _event.Event_Maximum_Pri
    __swig_destroy__ = _event.delete_Event
    __del__ = lambda self : None;
    def name(self): return _event.Event_name(self)
    def description(self): return _event.Event_description(self)
    def dump(self): return _event.Event_dump(self)
    def process(self): return _event.Event_process(self)
    def scheduled(self): return _event.Event_scheduled(self)
    def squash(self): return _event.Event_squash(self)
    def squashed(self): return _event.Event_squashed(self)
    def isExitEvent(self): return _event.Event_isExitEvent(self)
    def when(self): return _event.Event_when(self)
    def priority(self): return _event.Event_priority(self)
Event_swigregister = _event.Event_swigregister
Event_swigregister(Event)
cvar = _event.cvar
MaxTick = cvar.MaxTick
MicroPCRomBit = cvar.MicroPCRomBit
MaxAddr = cvar.MaxAddr
InvalidThreadID = cvar.InvalidThreadID
InvalidPortID = cvar.InvalidPortID
mainEventQueue = cvar.mainEventQueue

class EventQueue(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _event.new_EventQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _event.EventQueue_name(self)
    def reschedule(self, *args): return _event.EventQueue_reschedule(self, *args)
    def nextTick(self): return _event.EventQueue_nextTick(self)
    def serviceOne(self): return _event.EventQueue_serviceOne(self)
    def serviceEvents(self, *args): return _event.EventQueue_serviceEvents(self, *args)
    def empty(self): return _event.EventQueue_empty(self)
    def dump(self): return _event.EventQueue_dump(self)
    def debugVerify(self): return _event.EventQueue_debugVerify(self)
    def replaceHead(self, *args): return _event.EventQueue_replaceHead(self, *args)
    def schedule(self, *args): return _event.EventQueue_schedule(self, *args)
    def deschedule(self, *args): return _event.EventQueue_deschedule(self, *args)
    __swig_destroy__ = _event.delete_EventQueue
    __del__ = lambda self : None;
EventQueue_swigregister = _event.EventQueue_swigregister
EventQueue_swigregister(EventQueue)

class PythonEvent(Event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _event.new_PythonEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _event.delete_PythonEvent
    __del__ = lambda self : None;
    def incref(self): return _event.PythonEvent_incref(self)
    def decref(self): return _event.PythonEvent_decref(self)
    def process(self): return _event.PythonEvent_process(self)
PythonEvent_swigregister = _event.PythonEvent_swigregister
PythonEvent_swigregister(PythonEvent)


def createCountedDrain():
  return _event.createCountedDrain()
createCountedDrain = _event.createCountedDrain

def cleanupCountedDrain(*args):
  return _event.cleanupCountedDrain(*args)
cleanupCountedDrain = _event.cleanupCountedDrain
class CountedDrainEvent(Event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setCount(self, *args): return _event.CountedDrainEvent_setCount(self, *args)
    __swig_destroy__ = _event.delete_CountedDrainEvent
    __del__ = lambda self : None;
CountedDrainEvent_swigregister = _event.CountedDrainEvent_swigregister
CountedDrainEvent_swigregister(CountedDrainEvent)

class SimLoopExitEvent(Event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getCause(self): return _event.SimLoopExitEvent_getCause(self)
    def getCode(self): return _event.SimLoopExitEvent_getCode(self)
    __swig_destroy__ = _event.delete_SimLoopExitEvent
    __del__ = lambda self : None;
SimLoopExitEvent_swigregister = _event.SimLoopExitEvent_swigregister
SimLoopExitEvent_swigregister(SimLoopExitEvent)


def exitSimLoop(*args):
  return _event.exitSimLoop(*args)
exitSimLoop = _event.exitSimLoop


def simulate(*args):
  return _event.simulate(*args)
simulate = _event.simulate

